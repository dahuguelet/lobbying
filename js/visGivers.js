// Generated by CoffeeScript 1.8.0

(function() {
  var BubbleChart, root;
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
BubbleChart = (function() {
  function BubbleChart(data) {
    this.hide_details = __bind(this.hide_details, this);
    this.show_details = __bind(this.show_details, this);
    this.hide_category = __bind(this.hide_category, this);
    this.display_category = __bind(this.display_category, this);
    this.move_towards_category = __bind(this.move_towards_category, this);
    this.display_by_category = __bind(this.display_by_category, this);
    this.move_towards_center = __bind(this.move_towards_center, this);
    this.display_group_all = __bind(this.display_group_all, this);
    this.start = __bind(this.start, this);
    this.create_vis = __bind(this.create_vis, this);
    this.create_nodes = __bind(this.create_nodes, this);
    var max_amount;
    this.data = data;
    this.width = 900;
    this.height = 550;
    this.tooltip = CustomTooltip("lobby_tooltip", 240);
    this.category_centers = {
      "low": {
        x: this.width * .3,
        y: this.height * .55
      },
      "medlow": {
        x: this.width * .4,
        y: this.height * .55
      },
      "med": {
        x: this.width * .5,
        y: this.height * .55
      },
      "medhigh": {
        x: this.width * .6,
        y: this.height * .55
      },
      "high": {
        x: this.width * .7,
        y: this.height * .55
      }
    };
    this.layout_gravity = -.01;
    this.damper = 0.1;
    this.vis = null;
    this.nodes = [];
    this.force = null;
    this.circles = null;
    this.fill_color = d3.scale.ordinal()
      .domain(["one", "two", "three", "four", "five"])
      .range(["#CCE5CC", "#99CC99", "#4CA64C", "#008000", "#005900"]);
    max_amount = d3.max(this.data, function(d) {
      return parseInt(d.amount_given);
    });
    this.radius_scale = d3.scale.pow()
      .exponent(0.5)
      .domain([0, max_amount])
      .range([2, 50]);
    this.create_nodes();
    this.create_vis();
  }
  BubbleChart.prototype.create_nodes = function() {
    this.data.forEach(__bind(function(d) {
      var node;
      node = {
        id: d.id,
        radius: this.radius_scale(parseInt(d.amount_given)),
        value: d.amount_given,
        org: d.org_name,
        industry: d.org_industry,
        group: d.group,
        category: d.category,
        x: Math.random() * 900,
        y: Math.random() * 800
      };
      return this.nodes.push(node);
    }, this));
    return this.nodes.sort(function(a, b) {
      return b.value - a.value;
    });
  };
  BubbleChart.prototype.create_vis = function() {
    var that;
    this.vis = d3.select("#vis")
      .append("svg")
      .attr("width", this.width)
      .attr("height", this.height)
      .attr("id", "svg_vis");
    this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
      return d.id;
    });
    that = this;
    this.circles.enter()
      .append("circle")
      .attr("r", 0).attr("fill", __bind(function(d) {
      return this.fill_color(d.group);
    }, this))
      .attr("stroke-width", 3)
      .attr("stroke", __bind(function(d) {
      return d3.rgb(this.fill_color(d.group)).darker();
    }, this))
        .attr("id", function(d) {
      return "bubble_" + d.id;
    }).on("mouseover", function(d, i) {
      return that.show_details(d, i, this);
    }).on("mouseout", function(d, i) {
      return that.hide_details(d, i, this);
    });
    return this.circles.transition()
      .duration(2000)
      .attr("r", function(d) {
      return d.radius;
    });
  };
  BubbleChart.prototype.charge = function(d) {
    return -Math.pow(d.radius, 2.0) / 8;
  };
  BubbleChart.prototype.start = function() {
    return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
  };
  BubbleChart.prototype.display_group_all = function() {
    this.force.gravity(this.layout_gravity)
      .charge(this.charge)
      .friction(0.9)
      .on("tick", __bind(function(e) {
      return this.circles.each(this.move_towards_center(e.alpha))
        .attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    }, this));
    this.force.start();
    return this.hide_category();
  };
  BubbleChart.prototype.move_towards_center = function(alpha) {
    return __bind(function(d) {
      d.x = d.x + (this.center.x - d.x) * (this.damper + 0.02) * alpha;
      return d.y = d.y + (this.center.y - d.y) * (this.damper + 0.02) * alpha;
    }, this);
  };
  BubbleChart.prototype.display_by_category = function() {
    this.force.gravity(this.layout_gravity)
      .charge(this.charge)
      .friction(0.9)
      .on("tick", __bind(function(e) {
      return this.circles.each(this.move_towards_category(e.alpha))
        .attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    }, this));
    this.force.start();
    return this.display_category();
  };
  BubbleChart.prototype.move_towards_category = function(alpha) {
    return __bind(function(d) {
      var target;
      target = this.category_centers[d.category];
      d.x = d.x + (target.x - d.x) * (this.damper + 0.02) * alpha * 1.1;
      return d.y = d.y + (target.y - d.y) * (this.damper + 0.02) * alpha * 1.1;
    }, this);
  };
  BubbleChart.prototype.display_category = function() {
    var category, category_data, category_x, category_y;
    category_x = {
      "285 organizations": 110,
      "154 organizations": 265,
      "46 organizations": 420,
      "29 organizations": 575,
      "13 organizations": 745,
      "$79,006.85": 110,
      "$351,115.05": 265,
      "$313,293.91": 420,
      "$460,385.78": 575,
      "$609,967.15": 745,
      "(4 percent)": 110,
      "(19 percent)": 265,
      "(17 percent)": 420,
      "(25 percent)": 575,
      "(34 percent)": 745,
    };
    category_y = {
      "285 organizations": 45,
      "154 organizations": 45,
      "46 organizations": 45,
      "29 organizations": 45,
      "13 organizations": 45,
      "$79,006.85": 70,
      "$351,115.05": 70,
      "$313,293.91": 70,
      "$460,385.78": 70,
      "$609,967.15": 70,
      "(4 percent)": 95,
      "(19 percent)": 95,
      "(17 percent)": 95,
      "(25 percent)": 95,
      "(34 percent)": 95,
    }


    category_data = d3.keys(category_x);
    category = this.vis.selectAll(".category")
      .data(category_data);
    return category.enter()
      .append("text")
        .attr("class", "category2")
        .attr("x", __bind(function(d) {
          return category_x[d];
          }, this))
        .attr("y", __bind(function(d) {
          return category_y[d];
          }, this))
        .attr("text-anchor", "middle")
        .text(function(d) {
          return d;
        });
  };
  
  BubbleChart.prototype.hide_category = function() {
    var category;
    return category = this.vis.selectAll(".category").remove();
  };

  BubbleChart.prototype.show_details = function(data, i, element) {
    var content;
    d3.select(element).attr("stroke", "red");
    content = "<span class=\"name\">Organization:</span><span class=\"value\"> " + data.org + "</span><br/>";
    content += "<span class=\"name\">Amount:</span><span class=\"value\"> $" + (addCommas(data.value)) + "</span><br/>";
    content += "<span class=\"name\">Industry:</span><span class=\"value\"> " + data.industry + "</span>";
    return this.tooltip.showTooltip(content, d3.event);
  };
  BubbleChart.prototype.hide_details = function(data, i, element) {
    d3.select(element)
      .attr("stroke", __bind(function(d) {
      return d3.rgb(this.fill_color(d.group)).darker();
    }, this));
    return this.tooltip.hideTooltip();
  };
  return BubbleChart;
})();
root = typeof exports !== "undefined" && exports !== null ? exports : this;

$(function() {
  var chart, render_vis;
  chart = null;
  render_vis = function(csv) {
    chart = new BubbleChart(csv);
    chart.start();
    return root.display_category();
  };
  root.display_category = __bind(function() {
    return chart.display_by_category();
  }, this);
  return d3.csv("data/top_givers.csv", render_vis);
});

}).call(this);
